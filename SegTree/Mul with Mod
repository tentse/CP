#include <iostream>
#include <vector>

using namespace std;

class SegmentTree {
public:
    SegmentTree(const vector<long long>& arr, long long M) : n(arr.size()), M(M) {
        tree.resize(4 * n);
        build(arr, 0, 0, n - 1);
    }

    long long query(long long l, long long r) {
        return queryUtil(l, r, 0, 0, n - 1);
    }

private:
    long long n, M;
    vector<long long> tree;

    void build(const vector<long long>& arr, int node, long long start, long long end) {
        if (start == end) {
            tree[node] = arr[start] % M;
            return;
        }
        long long mid = (start + end) / 2;
        build(arr, 2 * node + 1, start, mid);
        build(arr, 2 * node + 2, mid + 1, end);
        tree[node] = (tree[2 * node + 1] * tree[2 * node + 2]) % M;
    }

    long long queryUtil(long long l, long long r, int node, long long start, long long end) {
        if (start > r || end < l) {
            return 1 % M; // Identity for multiplication
        }
        if (l <= start && end <= r) {
            return tree[node];
        }
        long long mid = (start + end) / 2;
        long long leftRes = queryUtil(l, min(r, mid), 2 * node + 1, start, mid);
        long long rightRes = queryUtil(max(l, mid + 1), r, 2 * node + 2, mid + 1, end);
        return (leftRes * rightRes) % M;
    }
};

int main() {
    vector<long long> arr = {2, 3, 4, 5, 6};
    long long M = 10;
    SegmentTree segTree(arr, M);

    long long product = segTree.query(1, 3);
    cout << "Product of elements from index 1 to 3: " << product << endl;

    return 0;
}
